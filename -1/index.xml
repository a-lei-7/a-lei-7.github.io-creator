<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>errgou的博客</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on errgou的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Mon, 02 Mar 2020 21:27:22 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JS函数和数组</title>
      <link>http://localhost:1313/posts/js%E5%87%BD%E6%95%B0%E5%92%8C%E6%95%B0%E7%BB%84/</link>
      <pubDate>Mon, 02 Mar 2020 21:27:22 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/js%E5%87%BD%E6%95%B0%E5%92%8C%E6%95%B0%E7%BB%84/</guid>
      <description>创建一个数组  新建数组  let arr = [1,2,3] let arr = newArray(1,2,3) let arr = newArray(3) //当只有一个参数时，只会定义数组的长度  数组转化  let arr = &#39;1,2,3&#39;.split(&#39;,&#39;) let arr = &#39;123&#39;.split(&#39;&#39;) let arr = &#39;abcde&#39;.split(&#39;&#39;)//将字符串转化为数组 Array.from(&#39;123&#39;) Array.from({0:&#39;a&#39;,1:&#39;b&#39;,2:&#39;c&#39;,3:&#39;d&#39;,length:4)}//可以将一个属性名为0 1 2 3 的对象，加上长度后转化为数组。 //如果 0 1 2 3 之中缺少一个属性名，那么会自动补上一个值为 undefined 的属性名  伪数组  // 没有数组共同属性的数组，即是伪数组 array = {0:&#39;a&#39;,1:&#39;b&#39;,2:&#39;c&#39;,3:&#39;d&#39;,length:4}  合并两个数组  arr1.concat.arr2  截取数组的一部分  arr1.slice(1) //从数组 arr1 中第二个元素开始，截取一个元素。不会影响原先的数组 arr1.slice(0) //全部截取（也是复制一个数组的方式） 数组元素的增删改查 删除元素 let arr = [1,2,3] delete arr[0] //删除第一个数值，但是会保留这个数值的位置，长度依然不变。 //数字小于长度的数组成为稀疏数组 //改变数组的length let arr = [1,2,3,4,5] arr.</description>
    </item>
    
    <item>
      <title>JS对象的基本用法</title>
      <link>http://localhost:1313/posts/js%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sun, 01 Mar 2020 15:03:04 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/js%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
      <description>对象的定义和写法 定义： 对象是一个 无序的，由键值对组成的集合。
有两种声明的方式：
let obj = {name :&#39;ergou&#39;,age:18} //多组数据可以用 &#39;,&#39; 隔开，这种为新的书写方式 let obj = new Object({name:&#39;ergou&#39;}) //这种一次只能添加一个属性，是以前的写法 // 属性名为字符串，可以是任意字符。如果不是标识符的话，就需要加上引号。 symbol 也可以作为属性名 当中的 &amp;lsquo;name&amp;rsquo; 为 key，即属性名; 后面的 &amp;lsquo;ergou&amp;rsquo; 为 value ，即属性值
let a = &#39;name&#39; let obj = { [a]:&#39;ergou&#39; } //这样的话，属性名就是变量 a 的值，为&#39;name&#39; let obj = { a:&#39;ergou&#39; } //这样属性名就是 &#39;a&#39; // 属性名没有添加[] 的话，会自动变为字符串。 JS 的每一个对象中都含有一个隐藏属性，这个隐藏属性中存储着共有属性组成的对象地址，这个共有属性的对象被称作原型。即原型当中存储着对象的共有属性。这个原型的原型值为 null
let obj = () obj {} __proto__:Object JS 的增删改查 删除对象中的属性 如何删除一个属性</description>
    </item>
    
    <item>
      <title>JS的基本语法</title>
      <link>http://localhost:1313/post/js%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Fri, 28 Feb 2020 22:31:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/js%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      <description>JS 基本语法 表达式和语句 语句是为了完成某种人物的操作，一般会改变环境变量，例如声明或者赋值等。语句以分号结尾，标志一句结束。
而表达式则是类似于 1+3 这种为了得到返回值的计算式。
语句和表达式的区别在于语句是为了进行某种操作，一般情况下不需要返回值；而表达式则是为了得到返回值，所以一定有一个返回值出现。
书写规范 在 JS 当中大小写是非常敏感的，需要注意两者的区别。而空格和回车对整体代码没有影响，可以适当添加让代码更加清晰。不过需要注意的一个地方就是 return 的后面不能添加回车。
不需要没条代码都写上注释，则重挑选记录便可。
可以使用 { } 将代码放在一起组合成代码块，常与 if/while/for 等语句合用。
标识符 即用来规定各种名称的合理写法，例如变量名或者函数名等。
在命名的时候可以 除数字之外的字母 、中文 或者 &amp;lsquo;$&amp;rsquo; / &amp;lsquo;_&amp;lsquo;开头，第二位及以后就可使用数字。也可以使用中文作为合法标识符。
常见的基础语句 if&amp;hellip;else&amp;hellip; 语法规则为
if(表达式) { 语句1 }else{ 语句2 }  [语句 1 在只有一句话的时候可以省略 { } ，不过以防产生歧义，还是写完整比较好]
switch 适用于多层判断结构。语法结构为：
switch ( fruit ){ case &#39;banana&#39;: console.log( &#39;banana&#39; ); break; case &#39;apple&#39;: console.log( &#39;apple&#39; ); break; default: console.log( &#39;none&#39; ); }  [break记得要写上，不然代码有可能一直执行下去] 还有几种类似的逻辑判断语句</description>
    </item>
    
    <item>
      <title>JS的基本语法</title>
      <link>http://localhost:1313/posts/js%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Fri, 28 Feb 2020 22:28:00 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/js%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      <description>JS 基本语法 表达式和语句 语句是为了完成某种人物的操作，一般会改变环境变量，例如声明或者赋值等。语句以分号结尾，标志一句结束。
而表达式则是类似于 1+3 这种为了得到返回值的计算式。
语句和表达式的区别在于语句是为了进行某种操作，一般情况下不需要返回值；而表达式则是为了得到返回值，所以一定有一个返回值出现。
书写规范 在 JS 当中大小写是非常敏感的，需要注意两者的区别。而空格和回车对整体代码没有影响，可以适当添加让代码更加清晰。不过需要注意的一个地方就是 return 的后面不能添加回车。
不需要没条代码都写上注释，则重挑选记录便可。
可以使用 { } 将代码放在一起组合成代码块，常与 if/while/for 等语句合用。
标识符 即用来规定各种名称的合理写法，例如变量名或者函数名等。
在命名的时候可以 除数字之外的字母 、中文 或者 &amp;lsquo;$&amp;rsquo; / &amp;lsquo;_&amp;lsquo;开头，第二位及以后就可使用数字。也可以使用中文作为合法标识符。
常见的基础语句 if&amp;hellip;else&amp;hellip; 语法规则为
if(表达式){语句1}else{ 语句2 } [语句 1 在只有一句话的时候可以省略 { } ，不过以防产生歧义，还是写完整比较好]
switch 适用于多层判断结构。语法结构为：
switch ( fruit ){case &#39;banana&#39;:console.log( &#39;banana&#39; );break;case &#39;apple&#39;:console.log( &#39;apple&#39; );break;default:console.log( &#39;none&#39; );} [break记得要写上，不然代码有可能一直执行下去] 还有几种类似的逻辑判断语句</description>
    </item>
    
    <item>
      <title>Hugo博客的搭建</title>
      <link>http://localhost:1313/posts/hugo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Mon, 10 Feb 2020 20:09:03 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/hugo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/</guid>
      <description>通过Hugo 和 Git，搭建一个属于自己的博客 首先需要先下载Hugo的安装包：  可以直接在 Google 搜索 Hugo Releases  点击第一个链接https://github.com/gohugoio/hugo/releases
然后选择自己电脑对应的版本“hugo_0.64.1_Windows-64bit.zip”
依旧在D:\Software建立文件夹：hugo，将文件“hugo.exe”放置其中，并按照如下步骤配置环境变量
对我的电脑&amp;gt;右键选择属性&amp;gt;高级系统设置&amp;gt;环境变量&amp;gt;点击下方的Path&amp;gt;点击新建&amp;gt;将hugo的路径粘贴至此即可
接着在通过cmder输入命令行
hugo --version  若返回hugo的版本信息，说明安装正确，即开始下一步
之后可以按照hugo官网给出的指示一步步完成配置信息 点击“Quick Start”
第一步：安装并配置环境变量（这一步已经执行） 第二步：建立一个属于博客的文件夹 hugo new site quickstart  当中“quickstart”是文件夹名称，可以命名为: git名称.github.io-creator，易于理解
第三步：下载主题 cd 刚才的目录 git init git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke echo &#39;theme = &amp;quot;ananke&amp;quot;&#39; &amp;gt;&amp;gt; config.toml  这一步目的是：
 建立一个.git本地仓库 下载一个名为&amp;quot;ananke&amp;quot;的主题 然后配置它  第四步：建立一个页面 hugo new posts/博客主题.md  之后默认内容如下 ：
--- title: &amp;quot;博客主题&amp;quot; date: 2019-03-26T08:47:11+01:00 draft: true ---  之后可以在&amp;mdash;之下编写博客内容</description>
    </item>
    
    <item>
      <title>Second Post</title>
      <link>http://localhost:1313/posts/second-post/</link>
      <pubDate>Mon, 10 Feb 2020 18:16:33 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/second-post/</guid>
      <description>第二个测试博客 </description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>http://localhost:1313/posts/my-first-post/</link>
      <pubDate>Mon, 10 Feb 2020 16:55:48 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/my-first-post/</guid>
      <description>新年快乐 终于有自己的博客了，希望之后可以多多写一些东西来填满它。</description>
    </item>
    
  </channel>
</rss>